Exercice 1


procedure afficheTabInt (tabInt : in tableau_de entier)

debut
    pour (i variant_de 0 a taille (tabInt) - 1)
    faire

        afficher (tabInt[i]);

    ffaire
fin

algorithme afficheTableauDeNElements

debut
    declarer n : entier_naturel;

    declarer tabInt : tableau_de entier;

    pour (i variant_de 0 a taille (tabInt) - 1)
    faire

        saisir (tabInt[i]);

    ffaire

    pour (i variant_de 0 a taille (tabInt) - 1)
    faire

        afficheTabInt (tabInt);

    ffaire
fin


Exercice 2

procedure genereTabInt (tabInt : out tableau_de entier, n : in entier_naturel)

debut
    redimensionner (tabInt, n);

    pour (i variant_de 0 a n - 1)
    faire

        saisir (tabInt[i]);

    ffaire
fin

algorithme afficheTableauDeNElements2

debut
    declarer n : entier_naturel;

    declarer tabInt : tableau_de entier;

    genereTabInt (tabInt, n);

    pour (i variant_de 0 a taille (tabInt) - 1)
    faire

        afficheTabInt (tabInt);

    ffaire
fin


Exercice 3


fonction genereTabInt2 (n : in entier_naturel) renvoie tableau_de entier

debut
    declarer tabInt : tableau_de entier;

    redimensionner (tabInt, n);

    pour (i variant_de 0 a n - 1)
    faire

        saisir (tabInt[i]);

    ffaire

    renvoie tabInt;
fin

algorithme afficheTableauDeNElements3

debut
    declarer n : entier_naturel;

    genereTabInt2 (n);

    pour (i variant_de 0 a taille (tabInt) - 1)
    faire

        afficheTabInt (tabInt);

    ffaire
fin


Exercice 4


procedure genereTabInt3 (tabInt : in_out tableau_de entier)

debut
    declarer n : entier_naturel;
    
    saisir (n);

    redimensionner (tabInt, n);

    pour (i variant_de 0 a n - 1)
    faire

        saisir (tabInt[i]);

    ffaire

fin

algorithme afficheTableauDeNElements4

debut
    declarer tabInt : tableau_de entier;

    genereTabInt3 (tabInt);

    pour (i variant_de 0 a taille (tabInt) - 1)
    faire

        afficheTabInt (tabInt);

    ffaire
fin


Exercice 5


procedure genereTabInt4 (tabInt : in_out tableau_de entier, min : in entier, max : in entier)

debut
    declarer n : entier_naturel;
    
    saisir (n);

    redimensionner (tabInt, n);

    pour (i variant_de 0 a n - 1)
    faire

        tabInt[i] <- Rand (min, max);

    ffaire
fin

algorithme afficheTableauDeNElements5

debut
    declarer min, max : entier;

    saisir (min);
    saisir (max);
    
    declarer tabInt : tableau_de entier;

    genereTabInt4 (tabInt, min, max);

    pour (i variant_de 0 a taille (tabInt) - 1)
    faire

        afficheTabInt (tabInt);

    ffaire
fin


Exercice 6


procedure afficheTabInt2 (tabInt : in tableau_de entier)

debut
    pour (i variant_de 0 a taille (tabInt) - 1)
    faire

        afficher (tabInt[0]);

        si (modulo (5, i) ne_vaut_pas 0)
            
            afficher (' ');
            afficher (tabInt[i]);

        fsi

    ffaire
fin


Exercice 7


procedure afficheTabInt3 (tabInt : in tableau_de entier)

debut
    pour (i variant_de 0 a taille (tabInt) - 1)
    faire

        pour (j variant_de 0 a taille (tabInt) - 1)
        faire

            si (modulo (5, j) ne_vaut_pas 0)

                afficher (' ');
                afficher (tabInt[j]);

            fsi

        ffaire

    ffaire
fin


Exercice 8


procedure afficheTabInt4 (tabInt : in tableau_de entier)

debut
    pour (i variant_de 0 a taille (tabInt) - 1)
    faire

        pour (j variant_de 0 a 4)
        faire

            si (j vaut 0)

                afficher (tabInt[0]);
            
            sinon_si (modulo (5, j) ne_vaut_pas 0)

                afficher ('-');
                afficher (tabInt[j]);

            fsi

        ffaire

    ffaire
fin


Exercice 9


procedure afficheTabInt4 (tabInt : in tableau_de entier, sep : in cara)

debut
    pour (i variant_de 0 a taille (tabInt) - 1)
    faire

        pour (j variant_de 0 a 4)
        faire

            si (j vaut 0)

                afficher (tabInt[0]);
            
            sinon_si (modulo (5, j) ne_vaut_pas 0)

                afficher ('-');
                afficher (tabInt[j]);

            fsi

        ffaire

    ffaire
fin